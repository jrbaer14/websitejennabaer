---
title: "countycensus"
format: html
editor: visual
---



First I ran the packages I needed to execute this project, including a variety of mapping tools.
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(dplyr)
library(tidyverse)
library(tigris)
library(sf)
library(tidycensus)
library(htmltools)
library(janitor)
library(here)
library(mapview)
library(leafsync)
library(leaflet.extras2)
options(scipen=999)
options(tigris_class = "sf")
```

I then used a census API Key to query the data I plan to look for.

```{r}
census_api_key("400666ffe99f9585382f01a246a13f9f9255452f", overwrite=TRUE)
```

I want to analyze which counties in Massachusetts have highest percentage of people reporting they have Irish ancestry. To find this information I queried the American Community Survey's most recent 2022 data.

I was able to pull the amount of people who claim Irish ancestry in every county in Massachusetts. I was also able to pull the total populations from all the counties in Massachusetts.
```{r}

irish_pop <- "B04006_049E"

irishancestry <- get_acs(geography = "county", variables = irish_pop, state = "MA", output = "wide")

irishancestry


county_pop <- "B01003_001E"

totalpopulation <- get_acs(geography = "county", variables = county_pop, state = "MA", output = "wide")

totalpopulation

```
I then created a new table combining this data to find the percentage of people who claim Irish ancestry in each county. I did this by doing a left join function to combine all of the data from the tables together. I then selected for the GEOID, Name of the counties, the estimate of the Irish descent population, and the estimate of the total population. From there, I created a new column for the percentage of people who claim Irish ancestry by using the mutate function to divide the Irish descendant population by the total population for each county. I then arranged the percent Irish variable in ascending order.


```{r}

irish_pop <- "B04006_049E"

county_pop <- "B01003_001E"

irish_and_county <- left_join(irishancestry, totalpopulation, by="GEOID")

irish_and_county %>%
  select(GEOID, NAME.x, irish_pop, county_pop)%>%
  mutate(perc_irish = (B04006_049E/B01003_001E)*100) %>%
  arrange(perc_irish)

percent_irish <- irish_and_county %>%
  select(GEOID, NAME.x, irish_pop, county_pop)%>%
  mutate(perc_irish = (B04006_049E/B01003_001E)*100) %>%
  arrange(perc_irish)
  
  

  
  
  

```

I ran the following packages to be able to use the mapping functions.

```{r}
library(sf)
library(tmaptools)
library(htmltools)
library(janitor)
library(rmapshaper)
library(here)
library(tidyverse)
library(tigris)
library(tmap)
library(terra)
options(tigris_class = "sf")

```


```{r}

percent_irish <- irish_and_county %>%
  select(GEOID, NAME.x, irish_pop, county_pop)%>%
  mutate(perc_irish = (B04006_049E/B01003_001E)*100) %>%
  arrange(perc_irish)%>%
  select(-ends_with("M"))

colnames(percent_irish) <- sub("E$", "", colnames(percent_irish))

percent_irish
```


```{r}
myvars <- c(county_pop = "B01003_001E", irish_pop = "B04006_049E")

ma_counties_withgeo<- get_acs(geography = "county",
                       variables = c(myvars),
                       state = "MA",
                       output = "wide",
                       geometry = TRUE)

```


```{r}
ma_counties_withgeo <- ma_counties_withgeo %>%
  select(-ends_with("M"))


 ma_counties_withgeo 

```



``` {r}
colnames(ma_counties_withgeo) <- sub("E$", "", colnames(ma_counties_withgeo))

ma_counties_withgeo

ma_counties_withgeo <- ma_counties_withgeo %>%
  mutate(per_irish = (irish_pop/county_pop)*100)


```



```{r}

mylabel <- glue::glue("{ma_counties_withgeo$NAM} {ma_counties_withgeo$per_irish}")

mapview(ma_counties_withgeo, zcol= "per_irish", 
        col.regions = RColorBrewer::brewer.pal(7, "Greens"), 
        alpha.regions = 1)

```


```{r}

mypopup <- glue::glue("<strong>{ma_counties_withgeo$NAM}</strong><br />
                      Total Population: {ma_counties_withgeo$totalpop}<br />
                      Percent Irish: {ma_counties_withgeo$per_irish}") %>% 
 
  lapply(htmltools::HTML)

```



```{r}

head(mypopup)

```



```{r}
mapview(ma_counties_withgeo, zcol= "per_irish", 
        col.regions = RColorBrewer::brewer.pal(7, "Greens"), 
        alpha.regions = 1,
        popup = mypopup)

```

